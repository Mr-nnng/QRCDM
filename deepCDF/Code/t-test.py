from scipy import stats
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# dataSer0=pd.Series([0.6628,0.6688,0.6707,0.664,0.6621,0.6584,0.6751,0.6758,0.6772,0.4483,0.4486,0.4491,0.4589,0.459,0.4594,0.4655,0.4817,0.4643,
#                                     0.4392,0.4472,0.4499,0.4408,0.4384,0.4335,0.4887,0.4886,0.4881,0.3956,0.396,0.3975,0.4224,0.4236,0.4227,0.3751,0.4737,0.3862,
#                                     0.4817,0.4807,0.472,0.5854,0.5825,0.5795,0.4339,0.4407,0.4372,0.2467,0.2482,0.247,0.2808,0.2794,0.2809,0.3159,0.3081,0.3065,
#                                     0.3343,0.3334,0.3251,0.445,0.4416,0.4381,0.3503,0.3599,0.354,0.1837,0.1843,0.1842,0.2281,0.2243,0.2273,0.1405,0.1438,0.1272,0.4469,0.3933,0.1864,	0.1724,0.4469,0.394,0.1875	,0.1736,0.4454	,0.3897,0.1913,0.1769]) #sub-obj
dataSer0=pd.Series([0.618,	0.4075,	0.6156,	0.4045,	0.6175,	0.4068,	0.6455,	0.4422,	0.6448,	0.4413,	0.6401,	0.4353,	0.6246,	0.4512,	0.6256,		0.4518,0.6264,	0.4531,	0.4068,	0.3432,	0.4062,	0.3427,	0.4052,	0.3418,	0.4216,	0.3746,	0.4211,	0.373,0.4222,0.3754,	0.4301,	0.3278,0.4316,	0.3297,	0.4302,	0.3245,	0.3964,	0.341,	0.3971,0.348,	0.3994,	0.3485,0.6384,	0.4329,	0.6495,	0.4472,	0.6672,	0.4705,	0.6349,	0.4284,	0.6489,	0.4464,	0.6679,	0.4714,	0.6361,	0.43	,0.6503,0.4482,	0.6682,0.4718,	0.6408,0.436	,	0.643,	0.4388,	0.6425,	0.4382,	0.6405,	0.4356,	0.6426,	0.4382,	0.642	,	0.4375,	0.6398,	0.4347,0.6407,	0.4359,	0.642,	0.4376,	0.6201,	0.4546,	0.6147,	0.455,	0.5964,	0.4546,	0.6204,	0.4533,	0.6117,	0.4552,	0.6021,	0.4584,	0.6213,	0.454	,0.614,0.4569,	0.5944,	0.4563,	0.4107,	0.3456,	0.417,0.3503,	0.4257,	0.3514,	0.4111,0.3469,	0.4161,	0.3498,	0.4259,	0.3539,	0.4107,	0.345,	0.4159,	0.3462,	0.4273,0.355,0.4202,	0.3718,	0.4209,	0.3717,	0.4206,	0.3722,	0.4206,	0.3733,	0.421,		0.3741,	0.4213,	0.3754,	0.4203,0.3721,	0.4208,	0.3723,	0.421,	0.3755,0.4465,	0.4022,	0.4389,	0.3346,	0.4456,0.4037,	0.4457,	0.387,	0.4392,	0.3371,0.443,0.3322,0.4364,0.3256,	0.433,	0.3294,	0.4391,	0.3457,	0.4124,0.3566,	0.4351,0.3594,	0.4635,	0.3844,0.4155,	0.3499,	0.4348,	0.3653,	0.4674,	0.386,	0.4177,0.3458,	0.4391,0.3601,0.4645,	0.3825,0.6325,	0.4234,0.6248,	0.4136,0.6251,	0.4141,0.6517,	0.4487,0.6535,0.4511,0.6522,0.4493,0.685,0.5271,0.6854	,0.5275,0.6861,	0.528,0.4153,0.3503,0.4156,0.3509,0.4154,0.3511,0.4266,	0.3799,0.4268,	0.3769,0.427,0.3805,0.4469	,0.3237,0.4468,	0.3595,0.4424,0.3304,0.424,0.3655,0.4236,0.3637,0.4212,0.3585,0.6394,	0.4326,0.6463,	0.442,	0.655,	0.4529,0.6393	,0.4324,	0.6468,	0.4427,	0.6567,0.4551,0.6417,0.4355,	0.6492,0.4458,0.6567,	0.4551,0.651,0.4478,	0.6498,0.4462,	0.6509,0.4477,0.6532,	0.4506,0.651	,0.4478,0.6528,	0.4502,0.6517,0.4487,0.6562,0.4546,0.6528,	0.4502,0.6802,	0.5257,0.6731,0.5259,0.6346,	0.5029,0.6807,	0.5263,	0.6732,	0.5251,0.6399,0.5051,0.6804,0.5256,	0.6742,0.5263,0.6409,0.508,0.4175,	0.3509,	0.4247,0.3571,0.4374,	0.3663,0.4173,	0.3514,0.4246	,0.3564,	0.4363,0.3629,0.4172,	0.3507,	0.4248,0.3565,	0.4365,0.3643,0.4263,	0.3806,0.4257,	0.3755,0.4267,	0.3807,0.4256,	0.3756,0.4261,0.3777,	0.4263,0.3807,0.4259	,0.3774,	0.4258,0.3786,0.4264,	0.381,0.4432,0.341,	0.4459,0.3278,0.4487,0.367,0.4466,0.3573,0.4558	,0.377,0.4499,0.3759,0.4444,0.349,0.4499,0.3566,0.4459,0.3436,0.4526,0.3862,0.4736,0.399,0.4567,0.3856,0.4559,0.3797,0.478	,0.4007,0.4627,0.3876,0.4515,0.3871,0.4805,0.4001,0.4619,0.385])

pop_mean=dataSer0.mean()
pop_std=dataSer0.std()

# dataSer=pd.Series([0.4469,0.3933,0.1864,	0.1724,0.4469,0.394,0.1875	,0.1736,0.4454	,0.3897,0.1913,0.1769])  #自由度为n-1=8 #sub-obj
dataSer=pd.Series([0.3964,	0.341,	0.3971,		0.348,	0.3994,		0.3485,	0.4124	,	0.3566,		0.4351,		0.3594	,	0.4635,		0.3844,	0.4155	,	0.3499,		0.4348,		0.3653,		0.4674,		0.386,	0.4177,		0.3458	,	0.4391,		0.3601,		0.4645,		0.3825,0.424,	0.3655,0.4236	,0.3637,0.4212	,0.3585,0.4526	,0.3862	,0.4736,	0.399	,0.4567,	0.3856,0.4559,	0.3797,	0.478,	0.4007,	0.4627	,0.3876,0.4515	,0.3871	,0.4805	,0.4001,	0.4619,	0.385])


sns.distplot(dataSer)
plt.title('dataSer')
# plt.show()

print('pop_mean:',pop_mean)
t,p_two =stats.ttest_1samp(dataSer,pop_mean)

print('t值=',t,'双尾检验的p值=',p_two)

p_one=p_two/2

print('单尾检验的p值=',p_one)

alpha=0.05

#零假设：pop_mean大于结果；备选假设：pop_mean小于结果-结果越大越好的情况-jie右尾
#零假设：pop_mean小于结果；备选假设：pop_mean大于结果-结果越小越好的情况-me 左尾
if(t<0 and p_one<alpha):
    #左尾判断条件
    print('拒绝零假设，有统计显著，也就是汽车引擎排放满足标准')
else:
    print('接受零假设，没有统计显著，也就是汽车引擎排放不满足标准')

# if(t>0 and p_one< alpha):
#     #右尾判断条件
#     print('拒绝零假设，有统计显著，也就是汽车引擎排放满足标准')
# else:
#     print('接受零假设，没有统计显著，也就是汽车引擎排放不满足标准')